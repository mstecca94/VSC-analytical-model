%implements s97_b0_a366g_ZeroCrossings "C"

%function ZeroCrossings(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

boolean_T anyStateSaturated;
B_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *_rtB;
P_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *_rtP;
X_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *_rtX;
ZCV_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *_rtZCSV;
DW_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *_rtDW;
%closefile localVarDecl
%<SLibCG_TrackDW(82)>\
_rtDW = %<(SLibCG_SE(SLibGetDWorkStructPtr()))>;
%<SLibCG_TrackZCSV(82)>\
_rtZCSV = %<(SLibCG_SE(SLibGetZCSignalValueStrucPtr()))>;
%<SLibCG_TrackContStates(82)>\
_rtX = %<(SLibCG_SE(SLibGetContStatesStructPtr()))>;
%<SLibCG_TrackParam(82)>\
_rtP = %<(SLibCG_SE(SLibGetParamStructPtr()))>;
%<SLibCG_TrackBlockIO(82)>\
_rtB = %<(SLibCG_SE(SLibGetBlockIOStructPtr()))>;
_rtZCSV->GridSupportingasCurrentSourceGridFeeding_Enable_ZC = _rtB->B_97_407_0;
if (_rtDW->GridSupportingasCurrentSourceGridFeeding_MODE) {
    _rtZCSV->Saturation_UprLim_ZC_p = _rtB->B_27_72_0 - _rtP->P_113;
    _rtZCSV->Saturation_LwrLim_ZC_e = _rtB->B_27_72_0 - _rtP->P_114;
    _rtZCSV->Saturation1_UprLim_ZC_e = _rtB->B_27_74_0 - _rtP->P_115;
    _rtZCSV->Saturation1_LwrLim_ZC_l = _rtB->B_27_74_0 - _rtP->P_116;
} else {
%<SLibCGIRZeroOutZeroCrossingsForSystem(27, 82, 65)>\
}
_rtZCSV->If1_IfInput_ZC = 0.0;
if (_rtB->B_97_405_0 > 0.5) {
    _rtZCSV->If1_IfInput_ZC = 1.0;
}
_rtZCSV->RelationalOperator_RelopInput_ZC[0] = _rtB->B_97_361_0[1] - _rtB->B_97_425_0;
_rtZCSV->RelationalOperator_RelopInput_ZC[1] = _rtB->B_97_361_0[2] - _rtB->B_97_425_0;
_rtZCSV->RelationalOperator_RelopInput_ZC_o[0] = _rtB->B_97_759_0[1] - _rtB->B_97_811_0;
_rtZCSV->RelationalOperator_RelopInput_ZC_o[1] = _rtB->B_97_759_0[2] - _rtB->B_97_811_0;
_rtZCSV->Saturation_UprLim_ZC = _rtB->B_97_957_0 - _rtP->P_1215;
_rtZCSV->Saturation_LwrLim_ZC = _rtB->B_97_957_0 - _rtP->P_1216;
_rtZCSV->Saturation1_UprLim_ZC = _rtB->B_97_960_0 - _rtP->P_1218;
_rtZCSV->Saturation1_LwrLim_ZC = _rtB->B_97_960_0 - _rtP->P_1219;
/* zero crossings for entering into limited region */
/* 0: INTG_NORMAL     1: INTG_LEAVING_UPPER_SAT  2: INTG_LEAVING_LOWER_SAT */
/* 3: INTG_UPPER_SAT  4: INTG_LOWER_SAT */
if ((_rtDW->Integrator_MODE == 1) && (_rtX->Integrator_CSTATE_g1 >= _rtP->P_1380)) {
    _rtZCSV->Integrator_IntgUpLimit_ZC = 0.0;
} else {
    _rtZCSV->Integrator_IntgUpLimit_ZC = _rtX->Integrator_CSTATE_g1 - _rtP->P_1380;
}
if ((_rtDW->Integrator_MODE == 2) && (_rtX->Integrator_CSTATE_g1 <= _rtP->P_1381)) {
    _rtZCSV->Integrator_IntgLoLimit_ZC = 0.0;
} else {
    _rtZCSV->Integrator_IntgLoLimit_ZC = _rtX->Integrator_CSTATE_g1 - _rtP->P_1381;
}
/* zero crossings for leaving limited region */
anyStateSaturated = false;
if ((_rtDW->Integrator_MODE == 3) || (_rtDW->Integrator_MODE == 4)) {
    anyStateSaturated = true;
}
if (anyStateSaturated) {
    _rtZCSV->Integrator_LeaveSaturate_ZC = _rtB->B_97_1248_0;
} else {
    _rtZCSV->Integrator_LeaveSaturate_ZC = 0.0;
}
_rtZCSV->RelationalOperator_RelopInput_ZC_i[0] = _rtB->B_97_1364_0[1] - _rtB->B_97_1374_0;
_rtZCSV->RelationalOperator_RelopInput_ZC_i[1] = _rtB->B_97_1364_0[2] - _rtB->B_97_1374_0;
_rtZCSV->RelationalOperator_RelopInput_ZC_b[0] = _rtB->B_97_1575_0[1] - _rtB->B_97_1585_0;
_rtZCSV->RelationalOperator_RelopInput_ZC_b[1] = _rtB->B_97_1575_0[2] - _rtB->B_97_1585_0;
/* zero crossings for entering into limited region */
/* 0: INTG_NORMAL     1: INTG_LEAVING_UPPER_SAT  2: INTG_LEAVING_LOWER_SAT */
/* 3: INTG_UPPER_SAT  4: INTG_LOWER_SAT */
if ((_rtDW->Integrator_MODE_h == 1) && (_rtX->Integrator_CSTATE_k >= _rtP->P_1814)) {
    _rtZCSV->Integrator_IntgUpLimit_ZC_j = 0.0;
} else {
    _rtZCSV->Integrator_IntgUpLimit_ZC_j = _rtX->Integrator_CSTATE_k - _rtP->P_1814;
}
if ((_rtDW->Integrator_MODE_h == 2) && (_rtX->Integrator_CSTATE_k <= _rtP->P_1815)) {
    _rtZCSV->Integrator_IntgLoLimit_ZC_o = 0.0;
} else {
    _rtZCSV->Integrator_IntgLoLimit_ZC_o = _rtX->Integrator_CSTATE_k - _rtP->P_1815;
}
/* zero crossings for leaving limited region */
anyStateSaturated = false;
if ((_rtDW->Integrator_MODE_h == 3) || (_rtDW->Integrator_MODE_h == 4)) {
    anyStateSaturated = true;
}
if (anyStateSaturated) {
    _rtZCSV->Integrator_LeaveSaturate_ZC_a = _rtB->B_97_1800_0;
} else {
    _rtZCSV->Integrator_LeaveSaturate_ZC_a = 0.0;
}
_rtZCSV->HitCrossing_HitNoOutput_ZC = _rtB->B_97_1907_0 - _rtP->P_1841;
_rtZCSV->HitCrossing_HitNoOutput_ZC_b = _rtB->B_97_1919_0 - _rtP->P_1848;
_rtZCSV->HitCrossing_HitNoOutput_ZC_f = _rtB->B_97_1931_0 - _rtP->P_1855;
_rtZCSV->HitCrossing_HitNoOutput_ZC_h = _rtB->B_97_1956_0 - _rtP->P_1868;
_rtZCSV->HitCrossing_HitNoOutput_ZC_o = _rtB->B_97_1968_0 - _rtP->P_1875;
_rtZCSV->HitCrossing_HitNoOutput_ZC_i = _rtB->B_97_1980_0 - _rtP->P_1882;
_rtZCSV->HitCrossing_HitNoOutput_ZC_f4 = _rtB->B_97_2005_0 - _rtP->P_1895;
_rtZCSV->HitCrossing_HitNoOutput_ZC_h3 = _rtB->B_97_2017_0 - _rtP->P_1902;
_rtZCSV->HitCrossing_HitNoOutput_ZC_l = _rtB->B_97_2029_0 - _rtP->P_1909;
_rtZCSV->HitCrossing_HitNoOutput_ZC_hl = _rtB->B_97_2054_0 - _rtP->P_1922;
_rtZCSV->HitCrossing_HitNoOutput_ZC_n = _rtB->B_97_2066_0 - _rtP->P_1929;
_rtZCSV->HitCrossing_HitNoOutput_ZC_d = _rtB->B_97_2078_0 - _rtP->P_1936;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[4].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("ZeroCrossing", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ZeroCrossing"))
%<SLibCG_AccessArg(4, 6, 0)>
%endif
%if SLibCG_ArgAccessed(4, 6, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "ZeroCrossing", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ZeroCrossing"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(4, 6, 0)>
%endif
%<LibSetSystemField(system, "CachedZeroCrossingLocalVars", localVarDecl)>
%endfunction
%function ZeroCrossingsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ZeroCrossings(\
%assign comma = ""
%if SLibCG_ArgAccessed(4, 6, 0)
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(4, 6, fcnProtoType)>
%endfunction
