%implements s97_b0_a366g_0_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T rtb_B_3_24_0[25];
real_T B_3_24_0[25];
int32_T i;
int32_T i_0;
real_T B_3_4_0_idx_2;
real_T B_3_4_0_idx_0;
real_T B_3_4_0_idx_1;
int32_T isHit;
%closefile localVarDecl
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,2,0,1)
%<SLibCG_AccessArg(0 ,2, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(0,2,0,2)
%<SLibCG_AccessArg(0 ,2, 0)>
%endif

if (rtu_Enable > 0.0) {
    isHit = ssIsSampleHit(S, 2, 0);
    if (isHit != 0) {
        localB->B_3_3_0 = localB->B_3_0_0;
        B_3_4_0_idx_0 = localP->P_7[0] * rtu_phi[1];
        B_3_4_0_idx_1 = localP->P_7[1] * rtu_phi[2];
        B_3_4_0_idx_2 = localP->P_7[2] * rtu_phi[3];
        localB->B_3_10_0 = 1.0 / ((localB->B_3_6_0[0] + localB->B_3_6_0[1]) + 1.0 / localDW->Lmd_sat_DSTATE);
        B_3_4_0_idx_0 = muDoubleScalarAbs(((B_3_4_0_idx_0 + B_3_4_0_idx_1) + B_3_4_0_idx_2) * localB->B_3_10_0);
        B_3_4_0_idx_1 = look1_pbinlxpw(B_3_4_0_idx_0, localP->P_11, localP->P_10, &localDW->m_bpIndex, 1U);
        if (B_3_4_0_idx_1 != 0.0) {
            B_3_4_0_idx_0 /= B_3_4_0_idx_1;
        } else {
            B_3_4_0_idx_0 = localB->B_3_14_0;
        }
        localB->B_3_17_0 = localP->P_13 * B_3_4_0_idx_0;
        if (localB->B_3_3_0) {
            isHit = ssIsSampleHit(S, 2, 0);
            if (isHit != 0) {
                B_3_4_0_idx_0 = localP->P_0[0] * rtu_phi[0];
                B_3_4_0_idx_1 = localP->P_0[1] * rtu_phi[4];
                localB->B_2_6_0 = 1.0 / (((localB->B_2_2_0[0] + localB->B_2_2_0[1]) + localB->B_2_2_0[2]) + 1.0 / localDW->Lmq_sat_DSTATE);
                B_3_4_0_idx_0 = muDoubleScalarAbs((B_3_4_0_idx_0 + B_3_4_0_idx_1) * localB->B_2_6_0);
                B_3_4_0_idx_1 = look1_pbinlxpw(B_3_4_0_idx_0, localP->P_4, localP->P_3, &localDW->m_bpIndex_c, 1U);
                if (B_3_4_0_idx_1 != 0.0) {
                    B_3_4_0_idx_0 /= B_3_4_0_idx_1;
                } else {
                    B_3_4_0_idx_0 = localB->B_2_10_0;
                }
                localB->B_2_13_0 = localP->P_6 * B_3_4_0_idx_0;
            }
            srUpdateBC(localDW->Lmq_sat_SubsysRanBC);
        }
        if (localB->B_3_1_0) {
            localB->B_3_22_0 = localB->B_2_13_0;
        } else {
            localB->B_3_22_0 = localB->B_3_21_0;
        }
        memcpy(&rtb_B_3_24_0[0], &localB->B_3_20_0[0], 25U * sizeof(real_T));
        rtb_B_3_24_0[0] = localB->B_3_22_0;
        rtb_B_3_24_0[4] = localB->B_3_22_0;
        rtb_B_3_24_0[20] = localB->B_3_22_0;
        rtb_B_3_24_0[24] = localB->B_3_22_0;
        for (isHit = 0; isHit < 3; isHit++) {
            rtb_B_3_24_0[1 + 5 * (1 + isHit)] = localB->B_3_17_0;
            rtb_B_3_24_0[2 + 5 * (1 + isHit)] = localB->B_3_17_0;
            rtb_B_3_24_0[3 + 5 * (1 + isHit)] = localB->B_3_17_0;
        }
        for (isHit = 0; isHit < 25; isHit++) {
            B_3_24_0[isHit] = rtb_B_3_24_0[isHit] + localB->B_3_25_0[isHit];
        }
        %<(SLibCGCallSubFcn("rt_invd5x5_snf", ["B_3_24_0", "localB->B_3_27_0", "S"], 0, 2, 0))>;
        for (isHit = 0; isHit < 5; isHit++) {
            for (i = 0; i < 5; i++) {
                localB->B_3_28_0[i + 5 * isHit] = 0.0;
                for (i_0 = 0; i_0 < 5; i_0++) {
                    localB->B_3_28_0[i + 5 * isHit] += localB->B_3_19_0[5 * i_0 + i] * localB->B_3_27_0[5 * isHit + i_0];
                }
            }
        }
        if (localB->B_3_2_0) {
            localB->B_3_30_0 = localB->B_2_6_0;
        } else {
            localB->B_3_30_0 = localB->B_3_29_0;
        }
    }
    if (ssIsMajorTimeStep(S) != 0) {
        srUpdateBC(localDW->Saturation_SubsysRanBC);
    }
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 2, 0)>
%endif
%if SLibCG_ArgAccessed(0, 2, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 2, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 5
%assign ::GlobalCurrentTID = 5
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
localB->B_3_0_0 = localP->P_19;
localB->B_3_1_0 = localP->P_20;
localB->B_3_2_0 = localP->P_21;
localB->B_3_6_0[0] = localP->P_8[0];
localB->B_3_6_0[1] = localP->P_8[1];
localB->B_3_14_0 = localP->P_12;
localB->B_2_2_0[0] = localP->P_1[0];
localB->B_2_2_0[1] = localP->P_1[1];
localB->B_2_2_0[2] = localP->P_1[2];
localB->B_2_10_0 = localP->P_5;
localB->B_3_21_0 = localP->P_16;
memcpy(&localB->B_3_19_0[0], &localP->P_14[0], 25U * sizeof(real_T));
memcpy(&localB->B_3_20_0[0], &localP->P_15[0], 25U * sizeof(real_T));
memcpy(&localB->B_3_25_0[0], &localP->P_17[0], 25U * sizeof(real_T));
localB->B_3_29_0 = localP->P_18;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 3, 0)>
%endif
%if SLibCG_ArgAccessed(0, 3, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 3, 0)>
%endif
%<LibSetSystemField(system, "CachedOutput5LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
%function OutputsFcnProtoTypeForTID(block, system, tid) Output
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_Saturation(\
%assign comma = ""
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%<comma>real_T rtu_Enable\
%assign comma = ", "
%<comma>const real_T rtu_phi[5]\
%assign comma = ", "
%<comma>B_Saturation_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *localB\
%assign comma = ", "
%<comma>DW_Saturation_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *localDW\
%assign comma = ", "
%<comma>P_Saturation_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *localP\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 5
%assign ::GlobalCurrentTID = 5
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_SaturationTID5(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 3, 0)
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%endif
%<comma>B_Saturation_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *localB\
%assign comma = ", "
%<comma>P_Saturation_Improved_With_PV_Disconnection_at_11s_Assignment_1_19052017_T *localP\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
