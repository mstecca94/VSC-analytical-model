%implements s97_b0_a366g_0_Functions "C"

%function rt_invd5x5_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T p[5];
real_T A[25];
int8_T ipiv[5];
int32_T jj;
int32_T jp1j;
int32_T idxmax;
int32_T ix;
real_T smax;
real_T s;
int32_T iy;
int32_T jA;
int32_T ijA;
int32_T pipk;
int32_T jBcol;
for (iy = 0; iy < 25; iy++) {
    y[iy] = 0.0;
    A[iy] = u[iy];
}
for (iy = 0; iy < 5; iy++) {
    ipiv[iy] = (int8_T)(1 + iy);
}
for (pipk = 0; pipk < 4; pipk++) {
    jBcol = pipk * 6 + 1;
    jj = pipk * 6;
    jp1j = jBcol + 1;
    iy = 5 - pipk;
    idxmax = 1;
    ix = jBcol - 1;
    smax = muDoubleScalarAbs(A[jj]);
    for (jA = 2; jA <= iy; jA++) {
        ix++;
        s = muDoubleScalarAbs(A[ix]);
        if (s > smax) {
            idxmax = jA;
            smax = s;
        }
    }
    if (A[(jBcol + idxmax) - 2] != 0.0) {
        if (idxmax - 1 != 0) {
            ipiv[pipk] = (int8_T)(pipk + idxmax);
            ix = pipk + 1;
            iy = pipk + idxmax;
            for (jA = 0; jA < 5; jA++) {
                smax = A[ix - 1];
                A[ix - 1] = A[iy - 1];
                A[iy - 1] = smax;
                ix += 5;
                iy += 5;
            }
        }
        iy = jp1j - pipk;
        for (ix = jp1j; ix <= iy + 3; ix++) {
            A[ix - 1] /= A[jj];
        }
    }
    jBcol = 3 - pipk;
    jA = jj;
    jj += 5;
    for (idxmax = 0; idxmax <= jBcol; idxmax++) {
        if (A[jj] != 0.0) {
            smax = -A[jj];
            ix = jp1j;
            iy = jA - pipk;
            for (ijA = jA + 7; ijA <= iy + 10; ijA++) {
                A[ijA - 1] += A[ix - 1] * smax;
                ix++;
            }
        }
        jj += 5;
        jA += 5;
    }
}
for (iy = 0; iy < 5; iy++) {
    p[iy] = (int8_T)(1 + iy);
}
if (ipiv[0] > 1) {
    pipk = p[ipiv[0] - 1];
    p[ipiv[0] - 1] = p[0];
    p[0] = (int8_T)pipk;
}
if (ipiv[1] > 2) {
    pipk = p[ipiv[1] - 1];
    p[ipiv[1] - 1] = p[1];
    p[1] = (int8_T)pipk;
}
if (ipiv[2] > 3) {
    pipk = p[ipiv[2] - 1];
    p[ipiv[2] - 1] = p[2];
    p[2] = (int8_T)pipk;
}
if (ipiv[3] > 4) {
    pipk = p[4];
    p[4] = p[3];
    p[3] = (int8_T)pipk;
}
for (jA = 0; jA < 5; jA++) {
    jj = 1 + jA;
    jBcol = p[jj - 1];
    y[(jj + 5 * (p[jj - 1] - 1)) - 1] = 1.0;
    for (pipk = jj; pipk < 6; pipk++) {
        if (y[((jBcol - 1) * 5 + pipk) - 1] != 0.0) {
            for (ix = pipk + 1; ix < 6; ix++) {
                y[(ix + 5 * (jBcol - 1)) - 1] -= y[((jBcol - 1) * 5 + pipk) - 1] * A[((pipk - 1) * 5 + ix) - 1];
            }
        }
    }
}
for (pipk = 0; pipk < 5; pipk++) {
    jBcol = 5 * pipk;
    for (jA = 4; jA >= 0; jA--) {
        jj = 5 * jA;
        if (y[jA + jBcol] != 0.0) {
            y[jA + jBcol] /= A[jA + jj];
            iy = jA - 1;
            for (ix = 0; ix <= iy; ix++) {
                jp1j = 1 + ix;
                y[(jp1j + jBcol) - 1] -= A[(jp1j + jj) - 1] * y[jA + jBcol];
            }
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("rt_invd5x5_snf", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "rt_invd5x5_snf"))
%<SLibCG_AccessArg(0, 0, 2)>
%endif
%if SLibCG_ArgAccessed(0, 0, 2)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "rt_invd5x5_snf", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "rt_invd5x5_snf"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 0, 2)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void rt_invd5x5_snf(\
%assign comma = ""
%<comma>const real_T u[25]\
%assign comma = ", "
%<comma>real_T y[25]\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 0, 2)
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

